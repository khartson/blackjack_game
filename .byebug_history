continue
card_response
id
continue
response.body
id
continue
response.body
response
responese.body
continue
hand.id
response.body
continue
self.id
hand.id
response.body
continue
response.body
response
continue
contiune
continue
hand.list_cards_in_hand
continue
hand.id
continue
hand.id
continue
hand.id
continue
self.pile_url + "/list"
self.pile_url + "/add/?cards=#{codes.join(",")}"
response
body
self.remaining
continue
self.pile_url + "/add/?cards=#{codes.join(",")}"
continue
self.pile_url + "/add/?cards=#{codes.join(",")}"
continue
self.hand_type
continue
self.hand_type
self
@@self
self.class
self.ClassName
self.classname
continue
self.id
continue
self.id
continue
self.id
continue
response.body
url
self.deck.hands.count
self.deck.hands.counrt
self
continue
self
continue
self
continue
response.body 
response
url
continue
url
continue
response_body_as_hash
response_body_as_hashj
JSON.parse(response.body)["cards"]
JSON.parse(response.body)["dealer"]
JSON.parse(response.body)["dealer"
JSON.parse(response.body)["player"]
JSON.parse(response.body)
response.body
response
continue
url
uri
response
continue
url
continue
resopnse
res.list_cards_in_hand
res = game.deck.hands.first
res = game.deck.hands.first.list_cards_in_hand
game.deck.hands.first
hand
continue
contnue
continue
game.state
game.status
continue
self.pile_url + "/add/?cards=#{codes.join("+")}"
self.pile_url + "/add/?cards=#{codes.join("+")}
self.pile_url + "/add/?cards=#{codes.join("+")
self.pile_url + "/add/?cards=#{codes.join("+")}
continue
codes.join("+") 
codes.join(
codes.join
codes
continue 
codes[1]
response
reponse
codes
continue
response["cards"].each do | a | print a["code"] end 
response["cards"].each do | a | print a["code"]
response["cards"].each do | a | print a["code
response["cards"].each do | a | print a.code end 
response["cards"] 
response
continue
response.cards
continue
continue 
continue
response["cards"].each do | a | puts a["code"] end 
response["cards"].each do | a | puts a["code"]
response["cards"].each do | a | puts a["code
response["cards"]
continue
response
continue
JSON.parse(response.body)
response.body
url
response
continue
self.deck.deck_url + "/draw/?count=#{amount}"
amount
response
continue
self.pile_url
response
continue
response
continue
self.pile_url
continue
self.deck.deck_id
response
continue
continue 
self.deck.deck_id 
response
continue 
self.deck.deck_url + "/pile/#{self.hand_type}/add/?cards="
self.deck.deck_url + "/pile/#{self.hand_type}"
self.deck.deck_url + "/pile/#{self.hand_type
self.deck.deck_url
self.hand_type
self.type
self.deck.deck_url
self.deck 
continue
deck_id
continue
game_id
continue
game_id
continue
continue 
game.deck.deck_id
game
continue
game.state
game.deck.hands.count
continue 
game.deck.hands.all
game.deck.hands.delete_all
game.hands
game.hand
game
game.hands
game.hands.all
game.hands.delete
game.hands.delete_all
game.deck.hands.count
game.deck.hands
game.hands
game
continue
get_active_game
get_active_gam
continue
deck_id
continue 
deck_id
continue
response_body_as_hash['deck_id']
respons_body_as_hash['deck_id']
deck_id
response_body_as_hash
deck_id
self.deck_url
continue
"https://www.deckofcardsapi.com/api" + "/deck/#{response_body_as_hash['deck_id']}"
"/deck/#{response_body_as_hash['deck_id']}"
"/deck/#{response_body_as_hash['deck_id']"
"https://www.deckofcardsapi.com/api" + "/deck/#{response_body_as_hash['deck_id']"
"https://www.deckofcardsapi.com/api" + "/deck/#{response_body_as_hash["deck_id"]"
response_body_as_hash
response.body
continue
JSON.parse(response.body)['deck_id']
response.get_fields('deck_id')
response.get_fields('deck_id'
response.body[:deck_id]
response.body['deck_id']
response.body
response
response.get_fields('id')
response.to_hash.body
response.to_hash
response.body.to_hash
rsponse.get_fields('deck_id')
response.body
response.get_fields
response.body.methods
response.message
response.methods
response.class
response
response.body.class
response.body.values
response.body.keys
response.body['success']
response.body('deck_id')
response.body
repsonse.body
response
continue
user_params[:credits].to_i
to_int(user_params[:credits])
user_params[:credits].to_int
user_params[:credits]
user.credits.integer?
continue
continue 
user.credits + 1 
user.credits
user.credits = 1 
user.credits.class
user.credits + 1
user.credits 
continue
